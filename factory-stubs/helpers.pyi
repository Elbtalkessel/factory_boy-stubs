from _typeshed import Incomplete
from collections.abc import Generator
import typing as t
from declarations import LazyAttribute

def debug(
    logger: str = "factory", stream: Incomplete | None = None
) -> Generator[None]: ...
def make_factory(klass, **kwargs): ...
def build(klass, **kwargs): ...
def build_batch(klass, size, **kwargs): ...
def create(klass, **kwargs): ...
def create_batch(klass, size, **kwargs): ...
def stub(klass, **kwargs): ...
def stub_batch(klass, size, **kwargs): ...
def generate(klass, strategy, **kwargs): ...
def generate_batch(klass, strategy, size, **kwargs): ...
def simple_generate(klass, create, **kwargs): ...
def simple_generate_batch(klass, create, size, **kwargs): ...
def lazy_attribute(func: t.Callable[..., t.Any]) -> LazyAttribute: ...
def iterator(func): ...
def sequence(func): ...
def lazy_attribute_sequence(func): ...
def container_attribute(func): ...
def post_generation(fun): ...
